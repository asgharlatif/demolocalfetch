[{"D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\index.js":"1","D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\App.js":"2","D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\reportWebVitals.js":"3","D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\Lfc.js":"4"},{"size":669,"mtime":1610657340729,"results":"5","hashOfConfig":"6"},{"size":1426,"mtime":1610657460233,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1609529045911,"results":"8","hashOfConfig":"6"},{"size":1075,"mtime":1610657590064,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d4cdej",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\index.js",[],"D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\App.js",["19","20"],"\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\n\nfunction App() {\n\n    //let data = {title:\"Waiting for Data\"} ;\n    let [data1,setData1] = useState({title:\"Waiting for Data 1\"});\n    let [isLit, SetLit] = useState(0);\n\n    let [isFetching, SetFetching] = useState(false);\n\n    useEffect(()=> {\n\n        async function fetchData(){\n        SetFetching(true)  \n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/3')\n        console.log(\"response using fetch inside useEffect = \", response)      \n        data1 = await response.json();\n        setData1(data1);\n        SetFetching(false)  \n    }\n\n    fetchData();\n\n    },[isLit]);\n\n    \n  if (isFetching){\n      return  <div>  Fetching In Progress.....................   </div>\n  }\n\n\n  return (\n\n    <div>\n\n    Hello World . Slow down the Network to see the effect of useEffect. <br />\n    <br />\n    This project is using following \n    <ul>\n      <li>aSync React useEffect To Fetch-Get (Completed) e.g (Note:- Fetched from Dummy API (https://jsonplaceholder.typicode.com/todos/3))</li>\n      <li>aSync React useEffect To Fetch-Post (To Be Completed)</li>\n    </ul>\n    \n    <br />\n    <span>Field Name =[Title] = Fetched Value = <b> [{data1.title}] </b> </span><br />\n    <span>Field Name =[UserId] = Fetched Value = <b> [{data1.userId}] </b></span><br />    \n\n    <br></br>\n\n    \n\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\reportWebVitals.js",[],"D:\\Development\\Data\\bootcamp2020\\demo-local-fetch\\src\\Lfc.js",[],{"ruleId":"21","severity":1,"message":"22","line":9,"column":17,"nodeType":"23","messageId":"24","endLine":9,"endColumn":23},{"ruleId":"25","severity":1,"message":"26","line":19,"column":17,"nodeType":"27","endLine":19,"endColumn":38},"no-unused-vars","'SetLit' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'data1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression"]